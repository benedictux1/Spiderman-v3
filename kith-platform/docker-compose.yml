version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: kith_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kith_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kith_network

  # Main Application
  web:
    build:
      context: .
      target: production
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/kith_platform
      REDIS_URL: redis://redis:6379/0
      FLASK_ENV: production
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY:-your-secret-key-change-in-production}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - kith_network
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: .
      target: production
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/kith_platform
      REDIS_URL: redis://redis:6379/0
      FLASK_ENV: production
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY:-your-secret-key-change-in-production}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    command: ["python", "celery_worker.py"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - kith_network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: .
      target: production
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/kith_platform
      REDIS_URL: redis://redis:6379/0
      FLASK_ENV: production
      FLASK_SECRET_KEY: ${FLASK_SECRET_KEY:-your-secret-key-change-in-production}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    command: ["celery", "-A", "app.celery_app", "beat", "--loglevel=info"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - kith_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - kith_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  kith_network:
    driver: bridge
